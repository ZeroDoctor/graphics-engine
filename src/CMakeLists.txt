cmake_minimum_required(VERSION 3.2)

project(graphics-engine)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")
set (CMAKE_CXX_STANDARD 17)

if (WIN32)
    list(APPEND GLM_INCLUDE_DIR "C:/Library/glm-0.9.9.8/glm/glm")
    set(glm_DIR "C:/Library/glm-0.9.9.8/glm/cmake/glm")
endif(WIN32)

find_package(Vulkan REQUIRED FATAL_ERROR)
find_package(glm REQUIRED FATAL_ERROR)
find_package(Freetype REQUIRED FATAL_ERROR)

IF(UNIX AND NOT APPLE)
	set(LINUX TRUE)
ENDIF()

IF(WIN32)
	IF (NOT Vulkan_FOUND)
		find_library(Vulkan_LIBRARY NAMES vulkan-1 vulkan PATHS ${CMAKE_SOURCE_DIR}/libs/vulkan)
		IF (Vulkan_LIBRARY)
			set(Vulkan_FOUND ON)
			MESSAGE("Using bundled Vulkan library version")
		ENDIF()
	ENDIF()
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DVK_USE_PLATFORM_WIN32_KHR")
ELSEIF(LINUX)
	message("${CMAKE_PREFIX_PATH}  ${CMAKE_MODULE_PATH} ${XCB_FIND_COMPONENTS} ${CMAKE_SOURCE_DIR}")
	IF (NOT Vulkan_FOUND)
		find_library(Vulkan_LIBRARY NAMES vulkan HINTS "$ENV{VULKAN_SDK}/lib" "${CMAKE_SOURCE_DIR}/libs/vulkan" REQUIRED)
		IF (Vulkan_LIBRARY)
			set(Vulkan_FOUND ON)
			MESSAGE("Using bundled Vulkan library version")
		ENDIF()
	ENDIF()
	find_package(Threads REQUIRED)
	IF(USE_D2D_WSI)
		MESSAGE("Using direct to display extension...")
		add_definitions(-D_DIRECT2DISPLAY)
	ELSEIF(USE_DIRECTFB_WSI)
		message("found this package")
		find_package(DirectFB REQUIRED)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DVK_USE_PLATFORM_DIRECTFB_EXT")
		include_directories(${DIRECTFB_INCLUDE_DIR})
	ELSEIF(USE_WAYLAND_WSI)
		message("found that package")
		find_program(PKG_CONFIG pkg-config)
		if (NOT PKG_CONFIG)
			message(FATAL_ERROR "pkg-config binary not found")
		endif ()
		find_package(Wayland REQUIRED)
		if (NOT WAYLAND_FOUND)
			message(FATAL_ERROR "Wayland development package not found")
		endif ()
		pkg_check_modules(WAYLAND_PROTOCOLS REQUIRED wayland-protocols)
		if (NOT WAYLAND_PROTOCOLS_FOUND)
			message(FATAL_ERROR "Wayland protocols package not found")
		endif ()
		find_program(WAYLAND_SCANNER wayland-scanner)
		if (NOT WAYLAND_SCANNER)
			message(FATAL_ERROR "wayland-scanner binary not found")
		endif ()
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DVK_USE_PLATFORM_WAYLAND_KHR")
		include_directories(${WAYLAND_INCLUDE_DIR})
		execute_process(COMMAND ${PKG_CONFIG} --variable=pkgdatadir wayland-protocols OUTPUT_VARIABLE protocol_dir OUTPUT_STRIP_TRAILING_WHITESPACE)
		execute_process(COMMAND ${WAYLAND_SCANNER} client-header ${protocol_dir}/stable/xdg-shell/xdg-shell.xml ${CMAKE_BINARY_DIR}/xdg-shell-client-protocol.h
				COMMAND ${WAYLAND_SCANNER} private-code ${protocol_dir}/stable/xdg-shell/xdg-shell.xml ${CMAKE_BINARY_DIR}/xdg-shell-protocol.c)
		include_directories(${CMAKE_BINARY_DIR})
	ELSE(USE_D2D_WSI)
		find_package(XCB REQUIRED)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DVK_USE_PLATFORM_XCB_KHR")
	ENDIF(USE_D2D_WSI)
ELSEIF(APPLE)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DVK_USE_PLATFORM_MACOS_MVK -DVK_EXAMPLE_XCODE_GENERATED")
	# Todo : android?
ENDIF(WIN32)

file(GLOB util "util/*.cpp")
file(GLOB init "init/*.cpp")
file(GLOB setup "setup/*.cpp")
file(GLOB renderer "renderer/*.cpp")
file(GLOB main "*.cpp")

add_executable (graphics-engine "${main}" "${util}" "${init}" "${setup}" "${renderer}")

target_include_directories(graphics-engine PUBLIC ${FREETYPE_INCLUDE_DIRS})
target_include_directories(graphics-engine PUBLIC ${XCB_INCLUDE_DIR})
target_include_directories(graphics-engine PUBLIC ${GLM_INCLUDE_DIRS})
target_include_directories(graphics-engine PUBLIC ${Vulkan_INCLUDE_DIRS})
target_include_directories(graphics-engine PRIVATE util)
target_include_directories(graphics-engine PRIVATE init)
target_include_directories(graphics-engine PRIVATE setup)
target_include_directories(graphics-engine PRIVATE renderer)
target_include_directories(graphics-engine PRIVATE main)

# target_compile_options(graphics-engine PRIVATE "-Wno-format" "-Wno-format-security")
target_compile_options(graphics-engine PRIVATE "-Wreturn-type")

target_link_libraries(graphics-engine ${XCB_LIBRARIES} ${Vulkan_LIBRARY} ${GLM_LIBRARY} ${FREETYPE_LIBRARIES})
